{
  "_args": [
    [
      {
        "raw": "rsmq@0.8.2",
        "scope": null,
        "escapedName": "rsmq",
        "name": "rsmq",
        "rawSpec": "0.8.2",
        "spec": "0.8.2",
        "type": "version"
      },
      "C:\\Users\\brode\\tcs_workspace\\p2p-chatapp"
    ]
  ],
  "_from": "rsmq@0.8.2",
  "_id": "rsmq@0.8.2",
  "_inCache": true,
  "_location": "/rsmq",
  "_nodeVersion": "4.4.7",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/rsmq-0.8.2.tgz_1490699754094_0.49937431141734123"
  },
  "_npmUser": {
    "name": "smrchy",
    "email": "smrchy@gmail.com"
  },
  "_npmVersion": "2.15.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rsmq@0.8.2",
    "scope": null,
    "escapedName": "rsmq",
    "name": "rsmq",
    "rawSpec": "0.8.2",
    "spec": "0.8.2",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/rsmq/-/rsmq-0.8.2.tgz",
  "_shasum": "897166f6405840d1e6c7e98b1405466e1727ff4b",
  "_shrinkwrap": null,
  "_spec": "rsmq@0.8.2",
  "_where": "C:\\Users\\brode\\tcs_workspace\\p2p-chatapp",
  "author": {
    "name": "P. Liess",
    "email": "smrchy+npm@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/smrchy/rsmq/issues"
  },
  "dependencies": {
    "hiredis": "^0.5.0",
    "lodash": "^4.17.4",
    "redis": "^2.6.5"
  },
  "description": "A really simple message queue based on Redis",
  "devDependencies": {
    "async": "*",
    "mocha": "*",
    "should": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "897166f6405840d1e6c7e98b1405466e1727ff4b",
    "tarball": "https://registry.npmjs.org/rsmq/-/rsmq-0.8.2.tgz"
  },
  "engines": {
    "node": "> 0.10.20"
  },
  "gitHead": "66216b84282c16e810a6d320916218edb691ffba",
  "homepage": "https://github.com/smrchy/rsmq#readme",
  "keywords": [
    "queue",
    "messagequeue",
    "jobs",
    "message-queue",
    "redis"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "smrchy",
      "email": "smrchy@gmail.com"
    }
  ],
  "name": "rsmq",
  "optionalDependencies": {
    "hiredis": "^0.5.0"
  },
  "readme": "![RSMQ: Redis Simple Message Queue for Node.js](https://img.webmart.de/rsmq_wide.png)\n\n# Redis Simple Message Queue\n\nA lightweight message queue for Node.js that requires no dedicated queue server. Just a Redis server.\n\n[![Build Status](https://secure.travis-ci.org/smrchy/rsmq.png?branch=master)](http://travis-ci.org/smrchy/rsmq)\n[![Dependency Status](https://david-dm.org/smrchy/rsmq.svg)](https://david-dm.org/smrchy/rsmq)\n\n**tl;dr:** If you run a Redis server and currently use Amazon SQS or a similar message queue you might as well use this fast little replacement. Using a shared Redis server multiple Node.js processes can send / receive messages.\n\n## Features\n\n* Lightweight: **Just Redis** and ~500 lines of javascript.\n* Speed: Send and receive 1000+ messages per second on an average machine. It's **just Redis**.\n* Guaranteed **delivery of a message to exactly one recipient** within a messages visibility timeout.\n* Received messages that are not deleted will reappear after the visibility timeout.\n* [Test coverage](http://travis-ci.org/smrchy/rsmq)\n* A message is deleted by the message id. The message id is returned by the `sendMessage` and `receiveMessage` method.\n* Messages stay in the queue unless deleted.\n* Optional RESTful interface via [rest-rsmq](https://github.com/smrchy/rest-rsmq)  \n  \n**Note:** RSMQ uses the Redis EVAL command (LUA scripts) so the minimum Redis version is 2.6+. \n\n## Usage\n\n* After creating a queue you can send messages to that queue.\n* The messages will be handled in a **FIFO** (first in first out) manner unless specified with a delay.\n* Every message has a unique `id` that you can use to delete the message. \n* The `sendMessage` method will return the `id` for a sent message.\n* The `receiveMessage` method will return an `id` along with the message and some stats.\n* Should you not delete the message it will be eligible to be received again after the visibility timeout is reached.\n* Please have a look at the `createQueue` and `receiveMessage` methods described below for optional parameters like **visibility timeout** and **delay**.\n\n\n## Installation\n\n`npm install rsmq`\n\n\n## Modules for RSMQ\n\nTo keep the core of *RSMQ* small additional functionality is available as modules:\n\n* [**rsmq-worker**](https://github.com/mpneuried/rsmq-worker) Helper to implement a worker with RSMQ.\n* [**rest-rsmq**](https://github.com/smrchy/rest-rsmq) A RESTful interface for RSMQ.\n* [**rsmq-cli**](https://github.com/mpneuried/rsmq-cli) A command-line interface / Terminal client for RSMQ.\n\n\n## RSMQ in other languages\n\nThe simplicity of RSMQ is useful in other languages. Here is a list of implementations in other languages:\n\n* [**Java**](https://github.com/wedeploy/jrsmq) RSMQ for Java. See [#48](https://github.com/smrchy/rsmq/issues/48)\n\nNote: Should you plan to port RSQM to another language please make sure to have tests to insure compatibility with all RSMQ clients. And of course: let me know so i can mention your port here.\n\n## Example\n\n### Initialize\n\n```javascript\nRedisSMQ = require(\"rsmq\");\nrsmq = new RedisSMQ( {host: \"127.0.0.1\", port: 6379, ns: \"rsmq\"} );\n```\nParameters for RedisSMQ via an *options* object:\n\n* `host` (String): *optional (Default: \"127.0.0.1\")* The Redis server\n* `port` (Number): *optional (Default: 6379)* The Redis port\n* `options` (Object): *optional (Default: {})* The Redis [https://github.com/mranney/node_redis#rediscreateclientport-host-options](redis.createClient) `options` object. \n* `client` (RedisClient): *optional* A existing redis client instance. `host` and `server` will be ignored.\n* `ns` (String): *optional (Default: \"rsmq\")* The namespace prefix used for all keys created by RSMQ\n\n\n### Create a queue\n\nPlease look at the *Methods* section for optional parameters when creating a queue.\n\n```javascript\nrsmq.createQueue({qname:\"myqueue\"}, function (err, resp) {\n\t\tif (resp===1) {\n\t\t\tconsole.log(\"queue created\")\n\t\t}\n});\n\n```\n\n\n### Send a message\n\n\n```javascript\nrsmq.sendMessage({qname:\"myqueue\", message:\"Hello World\"}, function (err, resp) {\n\tif (resp) {\n\t\tconsole.log(\"Message sent. ID:\", resp);\n\t}\n});\n```\n\n\n### Receive a message\n\n\n```javascript\nrsmq.receiveMessage({qname:\"myqueue\"}, function (err, resp) {\n\tif (resp.id) {\n\t\tconsole.log(\"Message received.\", resp)\t\n\t}\n\telse {\n\t\tconsole.log(\"No messages for me...\")\n\t}\n});\n```\n\n### Delete a message\n\n\n```javascript\nrsmq.deleteMessage({qname:\"myqueue\", id:\"dhoiwpiirm15ce77305a5c3a3b0f230c6e20f09b55\"}, function (err, resp) {\n\tif (resp===1) {\n\t\tconsole.log(\"Message deleted.\")\t\n\t}\n\telse {\n\t\tconsole.log(\"Message not found.\")\n\t}\n});\n```\n\n### List queues\n\n\n```javascript\nrsmq.listQueues( function (err, queues) {\n\tif( err ){\n\t\tconsole.error( err )\n\t\treturn\n\t}\n\tconsole.log(\"Active queues: \" + queues.join( \",\" ) )\n});\n```\n\n  \n## Methods\n\n\n### changeMessageVisibility\n\nChange the visibility timer of a single message.\nThe time when the message will be visible again is calculated from the current time (now) + `vt`.\n\nParameters:\n\n* `qname` (String): The Queue name.\n* `id` (String): The message id.\n* `vt` (Number): The length of time, in seconds, that this message will not be visible. Allowed values: 0-9999999 (around 115 days)\n\nReturns: \n\n* `1` if successful, `0` if the message was not found.\n\n\n\n### createQueue\n\nCreate a new queue.\n\nParameters:\n\n* `qname` (String): The Queue name. Maximum 160 characters; alphanumeric characters, hyphens (-), and underscores (_) are allowed.\n* `vt` (Number): *optional* *(Default: 30)* The length of time, in seconds, that a message received from a queue will be invisible to other receiving components when they ask to receive messages. Allowed values: 0-9999999 (around 115 days)\n* `delay` (Number): *optional* *(Default: 0)* The time in seconds that the delivery of all new messages in the queue will be delayed. Allowed values: 0-9999999 (around 115 days)\n* `maxsize` (Number): *optional* *(Default: 65536)* The maximum message size in bytes. Allowed values: 1024-65536 and -1 (for unlimited size)\n\nReturns:\n\n* `1`\n\n\n\n### deleteMessage\n\nParameters:\n\n* `qname` (String): The Queue name.\n* `id` (String): message id to delete.\n\nReturns:\n\n* `1` if successful, `0` if the message was not found.\n\n\n\n### deleteQueue\n\nDeletes a queue and all messages.\n\nParameters:\n\n* `qname` (String): The Queue name.\n\nReturns:\n\n* `1`\n\n\n\n### getQueueAttributes\n\nGet queue attributes, counter and stats\n\nParameters:\n\n* `qname` (String): The Queue name.\n\nReturns an object:\n\n* `vt`: The visibility timeout for the queue in seconds\n* `delay`: The delay for new messages in seconds\n* `maxsize`: The maximum size of a message in bytes\n* `totalrecv`: Total number of messages received from the queue\n* `totalsent`: Total number of messages sent to the queue\n* `created`: Timestamp (epoch in seconds) when the queue was created\n* `modified`: Timestamp (epoch in seconds) when the queue was last modified with `setQueueAttributes`\n* `msgs`: Current number of messages in the queue\n* `hiddenmsgs`: Current number of hidden / not visible messages. A message can be hidden while \"in flight\" due to a `vt` parameter or when sent with a `delay`\n\n\n\n### listQueues\n\nList all queues\n\nReturns an array:\n\n* `[\"qname1\", \"qname2\"]`\n\n\n\n### popMessage\n\nReceive the next message from the queue **and delete it**.\n\n**Important:** This method deletes the message it receives right away. There is no way to receive the message again if something goes wrong while working on the message.\n\nParameters:\n\n* `qname` (String): The Queue name.\n\nReturns an object:\n\n  * `message`: The message's contents.\n  * `id`: The internal message id.\n  * `sent`: Timestamp of when this message was sent / created.\n  * `fr`: Timestamp of when this message was first received.\n  * `rc`: Number of times this message was received.\n\nNote: Will return an empty object if no message is there  \n\n\n\n### receiveMessage\n\nReceive the next message from the queue.\n\nParameters:\n\n* `qname` (String): The Queue name.\n* `vt` (Number): *optional* *(Default: queue settings)* The length of time, in seconds, that the received message will be invisible to others. Allowed values: 0-9999999 (around 115 days)\n\nReturns an object:\n\n  * `message`: The message's contents.\n  * `id`: The internal message id.\n  * `sent`: Timestamp of when this message was sent / created.\n  * `fr`: Timestamp of when this message was first received.\n  * `rc`: Number of times this message was received.\n\nNote: Will return an empty object if no message is there  \n\n\n\n### sendMessage\n\nSends a new message.\n\nParameters:\n\n* `qname` (String)\n* `message` (String)\n* `delay` (Number): *optional* *(Default: queue settings)* The time in seconds that the delivery of the message will be delayed. Allowed values: 0-9999999 (around 115 days)\n\nReturns:\n\n* `id`: The internal message id.\n\n\n    \n### setQueueAttributes\n\nSets queue parameters.\n\nParameters:\n\n* `qname` (String): The Queue name.\n* `vt` (Number): *optional* * The length of time, in seconds, that a message received from a queue will be invisible to other receiving components when they ask to receive messages. Allowed values: 0-9999999 (around 115 days)\n* `delay` (Number): *optional* The time in seconds that the delivery of all new messages in the queue will be delayed. Allowed values: 0-9999999 (around 115 days)\n* `maxsize` (Number): *optional* The maximum message size in bytes. Allowed values: 1024-65536 and -1 (for unlimited size)\n\nNote: At least one attribute (vt, delay, maxsize) must be supplied. Only attributes that are supplied will be modified.\n\nReturns an object:\n\n* `vt`: The visibility timeout for the queue in seconds\n* `delay`: The delay for new messages in seconds\n* `maxsize`: The maximum size of a message in bytes\n* `totalrecv`: Total number of messages received from the queue\n* `totalsent`: Total number of messages sent to the queue\n* `created`: Timestamp (epoch in seconds) when the queue was created\n* `modified`: Timestamp (epoch in seconds) when the queue was last modified with `setQueueAttributes`\n* `msgs`: Current number of messages in the queue\n* `hiddenmsgs`: Current number of hidden / not visible messages. A message can be hidden while \"in flight\" due to a `vt` parameter or when sent with a `delay`\n\n    \n### quit\n\nDisconnect the redis client.\nThis is only useful if you are using rsmq within a script and want node to be able to exit.\n\n## Changes\n\nsee the [CHANGELOG](https://github.com/smrchy/rsmq/blob/master/CHANGELOG.md)\n\n\n## Other projects\n\n|Name|Description|\n|:--|:--|\n|[**node-cache**](https://github.com/tcs-de/nodecache)|Simple and fast Node.js internal caching. Node internal in memory cache like memcached.|\n|[**redis-tagging**](https://github.com/smrchy/redis-tagging)|A Node.js helper library to make tagging of items in any legacy database (SQL or NoSQL) easy and fast.|\n|[**redis-sessions**](https://github.com/smrchy/redis-sessions)|An advanced session store for Node.js and Redis|\n|[**rsmq-worker**](https://github.com/mpneuried/rsmq-worker)|Helper to implement a worker based on [RSMQ (Redis Simple Message Queue)](https://github.com/smrchy/rsmq).|\n|[**redis-notifications**](https://github.com/mpneuried/redis-notifications)|A Redis based notification engine. It implements the rsmq-worker to safely create notifications and recurring reports.|\n|[**task-queue-worker**](https://github.com/smrchy/task-queue-worker)|A powerful tool for background processing of tasks that are run by making standard http requests.|\n|[**obj-schema**](https://github.com/mpneuried/obj-schema)|Simple module to validate an object by a predefined schema|\n|[**connect-redis-sessions**](https://github.com/mpneuried/connect-redis-sessions)|A connect or express middleware to use [redis sessions](https://github.com/smrchy/redis-sessions) that lets you handle multiple sessions per user_id.|\n|[**systemhealth**](https://github.com/mpneuried/systemhealth)|Node module to run simple custom checks for your machine or it's connections. It will use [redis-heartbeat](https://github.com/mpneuried/redis-heartbeat) to send the current state to Redis.|\n|[**soyer**](https://github.com/mpneuried/soyer)|Soyer is small lib for serverside use of Google Closure Templates with node.js.|\n|[**grunt-soy-compile**](https://github.com/mpneuried/grunt-soy-compile)|Compile Goggle Closure Templates (SOY) templates including the handling of XLIFF language files.|\n|[**backlunr**](https://github.com/mpneuried/backlunr)|A solution to bring Backbone Collections together with the browser fulltext search engine Lunr.js|\n\n## The MIT License\n\nPlease see the LICENSE.md file.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/smrchy/rsmq.git"
  },
  "scripts": {
    "test": "mocha ./test/test.js"
  },
  "version": "0.8.2"
}
