{
  "_args": [
    [
      {
        "raw": "queue-fifo@0.2.3",
        "scope": null,
        "escapedName": "queue-fifo",
        "name": "queue-fifo",
        "rawSpec": "0.2.3",
        "spec": "0.2.3",
        "type": "version"
      },
      "C:\\Users\\brode\\tcs_workspace\\p2p-chatapp"
    ]
  ],
  "_from": "queue-fifo@0.2.3",
  "_id": "queue-fifo@0.2.3",
  "_inCache": true,
  "_location": "/queue-fifo",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/queue-fifo-0.2.3.tgz_1459483830390_0.7162837067153305"
  },
  "_npmUser": {
    "name": "jsj0nes",
    "email": "jsjones96@gmail.com"
  },
  "_npmVersion": "1.4.28",
  "_phantomChildren": {},
  "_requested": {
    "raw": "queue-fifo@0.2.3",
    "scope": null,
    "escapedName": "queue-fifo",
    "name": "queue-fifo",
    "rawSpec": "0.2.3",
    "spec": "0.2.3",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/queue-fifo/-/queue-fifo-0.2.3.tgz",
  "_shasum": "8bd019281cf1574f0e076ddaa8a1c6193ff8aa26",
  "_shrinkwrap": null,
  "_spec": "queue-fifo@0.2.3",
  "_where": "C:\\Users\\brode\\tcs_workspace\\p2p-chatapp",
  "author": {
    "name": "Jason Jones"
  },
  "bugs": {
    "url": "https://github.com/jasonsjones/queue-fifo/issues"
  },
  "dependencies": {
    "dbly-linked-list": "0.1.10"
  },
  "description": "Javascript implementation of a queue data structure",
  "devDependencies": {
    "gulp": "3.9.1",
    "gulp-istanbul": "0.10.3",
    "gulp-jscs": "3.0.2",
    "gulp-jshint": "2.0.0",
    "gulp-load-plugins": "1.2.0",
    "gulp-mocha": "2.2.0",
    "gulp-util": "3.0.7",
    "jshint-stylish": "2.1.0",
    "mocha": "2.4.5",
    "should": "8.2.2"
  },
  "directories": {},
  "dist": {
    "shasum": "8bd019281cf1574f0e076ddaa8a1c6193ff8aa26",
    "tarball": "https://registry.npmjs.org/queue-fifo/-/queue-fifo-0.2.3.tgz"
  },
  "gitHead": "0e8cf35ffe14509af97f5addb3cc9578686817f7",
  "homepage": "https://github.com/jasonsjones/queue-fifo",
  "keywords": [
    "queue",
    "FIFO",
    "abstract data-type",
    "data structure"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jsj0nes",
      "email": "jsjones96@gmail.com"
    }
  ],
  "name": "queue-fifo",
  "optionalDependencies": {},
  "readme": "[![npm version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![dependency status][dm-image]][dm-url] [![devDependency status][devdep-image]][devdep-url]\n\n# Queue Data Structure\n\n## Description\n\nThis is a javascript implementation of a\n[queue](http://en.wikipedia.org/wiki/Queue%28abstract_data_type%29)\ndata structure.\n\nA queue data structure models the notion of 'First in First Out', or FIFO&mdash;\nimage the line at the grocery store.  The first item to be removed from a queue\nis the first item placed in the queue.  Basically, the order in which items\nare placed in the queue matters.\n\nThis particular implementation utilizes a\n[linked list](https://www.npmjs.com/package/dbly-linked-list) as the\nunderlying data structure.  This offers several benefits.\n\n* We can leverage the work that has already been done to implement the\n  linked list.\n\n* This lends itself to a level of composition and abstraction which greatly\n  simplifies this implementation.  It provides a wrapper around only those\n  methods of the linked list that we need to construct the properties of a\n  queue data structure.\n\n* The 'queue' or 'dequeue' operations can be completed in O(1) time.\n\n* No additional overhead is required to 'resize' the data structure to add\n  more elements to the queue.  When elements are 'queued' up in the queue, the\n  underlying linked list will adjust its size dynamically.\n\n*For specific examples and documentation, see the below sections*\n\n### Motivation:\n\nThe main purpose of this project is revisit the basics, and focus on the\ndevelopment process.\n\n*I wholehearedly acknowledge that the basic data structure space is populated\nwith well-written code and efficient implementations, and one could easily grab\none of those libraries and integrate it in their project.  However, the main\ndifference between those libraries/implementations and this one is that this is\nthe best implementation I have ever written.  My hope is that someone else will\nfind this useful, but understand, this code is not the goal; this will simply\nbe a useful bi-product of the journey.  The underlying motivation is to\nunderstand and, more importantly, learn from the process to get to the desired\nend-state&mdash;for me it is all about the joy of the journey.*\n\n#### Environment:\n\nAlthough this implementation is designed to be used with\n[Node.js](http://www.nodejs.org), it could be used in other contexts with minor\nmodifications.  This implementation does not have any external dependencies\nthat would preclude it from being used in the browser--just include it with a\n`<script>` tag and it should be good to go.  _Disclaimer: I have not tested\nthis implementation in any other context/environment; only tested with node.js_\n\n----\n\n## Basic Usage\n\nInstall with npm :\n\n```bash\nnpm install queue-fifo --save\n```\nBasic usage example below.  _Note: it does not cover all the available\nmethods, rather just highlights the main functionality to get up and running\nwith this data structure. For a description of all the methods, see the\nAPI section._\n\n```javascript\nvar Queue = require('queue-fifo');\nvar queue - new Queue();\n\nqueue.isEmpty();\n// --> true\n\nqueue.enqueue('data item 1');\nqueue.enqueue('data item 2');\nqueue.enqueue('data item 3');\nqueue.enqueue('data item 4');\n// queue contains:\n// 'data item 1', <-- front\n//  ... ,\n// 'data item 4'\n\nqueue.isEmpty();\n// --> false\n\nqueue.size();\n// --> 4\n\nqueue.dequeue();\n// --> removes 'data item 1'\n\nqueue.peek()\n// --> 'data item 2'\n\nqueue.size();\n// --> 3\n\nqueue.clear();\nqueue.isEmpty();\n// --> true\n```\n\n## API\n\n**Available methods for a queue instance:**\n\n* ### isEmpty()\n    Determines if the queue is empty or not. Returns true if is empty, false\n    otherwise.\n\n* ### size()\n    Returns the size of the queue, or number of items\n\n* ### clear()\n    Clears the queue of all data\n\n* ### enqueue(data)\n    Adds an new item containing 'data' to the back of the queue\n\n* ### dequeue()\n    Removes the item from the front of the queue\n\n* ### peek()\n    Returns the data of the item at the front of the queue,\n    but does not remove it\n\n----\n## License\nMIT &copy; Jason Jones\n\n[npm-image]:https://badge.fury.io/js/queue-fifo.svg\n[npm-url]:http://npmjs.org/package/queue-fifo\n[travis-image]:https://travis-ci.org/jasonsjones/queue-fifo.svg\n[travis-url]:https://travis-ci.org/jasonsjones/queue-fifo\n[dm-image]:https://david-dm.org/jasonsjones/queue-fifo.svg\n[dm-url]:https://david-dm.org/jasonsjones/queue-fifo\n[devdep-image]:https://david-dm.org/jasonsjones/queue-fifo/dev-status.svg\n[devdep-url]:https://david-dm.org/jasonsjones/queue-fifo#info=devDependencies\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jasonsjones/queue-fifo.git"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha"
  },
  "version": "0.2.3"
}
