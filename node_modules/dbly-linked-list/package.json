{
  "_args": [
    [
      {
        "raw": "dbly-linked-list@0.1.10",
        "scope": null,
        "escapedName": "dbly-linked-list",
        "name": "dbly-linked-list",
        "rawSpec": "0.1.10",
        "spec": "0.1.10",
        "type": "version"
      },
      "C:\\Users\\brode\\tcs_workspace\\p2p-chatapp\\node_modules\\queue-fifo"
    ]
  ],
  "_from": "dbly-linked-list@0.1.10",
  "_id": "dbly-linked-list@0.1.10",
  "_inCache": true,
  "_location": "/dbly-linked-list",
  "_nodeVersion": "4.4.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/dbly-linked-list-0.1.10.tgz_1458441407523_0.45641610375605524"
  },
  "_npmUser": {
    "name": "jsj0nes",
    "email": "jsjones96@gmail.com"
  },
  "_npmVersion": "2.1.16",
  "_phantomChildren": {},
  "_requested": {
    "raw": "dbly-linked-list@0.1.10",
    "scope": null,
    "escapedName": "dbly-linked-list",
    "name": "dbly-linked-list",
    "rawSpec": "0.1.10",
    "spec": "0.1.10",
    "type": "version"
  },
  "_requiredBy": [
    "/queue-fifo"
  ],
  "_resolved": "https://registry.npmjs.org/dbly-linked-list/-/dbly-linked-list-0.1.10.tgz",
  "_shasum": "41bc7f186be34c8029bbb4e6c25d310501e933a6",
  "_shrinkwrap": null,
  "_spec": "dbly-linked-list@0.1.10",
  "_where": "C:\\Users\\brode\\tcs_workspace\\p2p-chatapp\\node_modules\\queue-fifo",
  "author": {
    "name": "Jason Jones"
  },
  "bugs": {
    "url": "https://github.com/jasonsjones/doubly-linked-list/issues"
  },
  "dependencies": {
    "lodash": "4.6.1"
  },
  "description": "Javascript implementation of a doubly linked-list data structure",
  "devDependencies": {
    "gulp": "3.9.1",
    "gulp-istanbul": "0.10.3",
    "gulp-jscs": "3.0.2",
    "gulp-jshint": "2.0.0",
    "gulp-load-plugins": "1.2.0",
    "gulp-mocha": "2.2.0",
    "gulp-util": "3.0.7",
    "jshint-stylish": "2.1.0",
    "mocha": "2.4.5",
    "should": "8.2.2"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "41bc7f186be34c8029bbb4e6c25d310501e933a6",
    "tarball": "https://registry.npmjs.org/dbly-linked-list/-/dbly-linked-list-0.1.10.tgz"
  },
  "gitHead": "124858080341255d507ac4b94402c8deda5c8344",
  "homepage": "https://github.com/jasonsjones/doubly-linked-list#readme",
  "keywords": [
    "doubly linked-list",
    "linked list",
    "data structure"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jsj0nes",
      "email": "jsjones96@gmail.com"
    }
  ],
  "name": "dbly-linked-list",
  "optionalDependencies": {},
  "readme": "[![npm pkg][npm-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![dependency status][dm-image]][dm-url]\n[![devDependency status][devdep-image]][devdep-url]\n\n# Doubly Linked List\n\n## Description\n\nThis is a javascript implementation of a [doubly linked\nlist](http://en.wikipedia.org/wiki/Linked_list) data structure.\n\nIn simple terms, a doubly linked list consists of one or more 'nodes'.  Each\nnode has a data field (which can contain any data--a primitive value or complex\nobject) and a pointer to the next 'node' and the previous 'node'. This\nadditional pointer to the previous node is what distinguishes a doubly linked\nlist from a singly linked list--a singly linked list only contains a pointer,\nor reference, to the next node.  The major advantage to having pointers to\nboth the next and previous node is that the list can be traversed in both\ndirections, as well as making operations that operate on the 'middle' of\nthe list a bit more efficient since each node has a reference the one\nbefore it and the one after it.  The idea of having a links to the\nprevious and next nodes is where this data structure got its descriptive\nname.\n\nThis implementation provides basic functionality of adding nodes to the front\nor back of the list, as well as the ability to insert a node at a given\nposition in the list.  It also provides the ability to remove nodes at the\nfront or back of the list, or from any given position.\n\nThe find, or search, functionality provides the ability to find the first node\ncontaining specified data. It also provides the ability to find a node given a\nspecific position, or index, in the list.\n\n### Advantages\n\n- List will grow dynamically with each node added; no requirement to\n  'resize' list when it reaches a certain size, saving considerable overhead\n  in 'house-keeping' operations.\n- Flexibility to add or remove nodes at the beginning or end of the list in\n  O(1) time.  This is a significant improvement over its\n  [singly linked list](https://github.com/jasonsjones/singly-linked-list)\n  counterpart.\n\n### Disadvantages\n\n- All 'find' operations take O(n) time to iterate over the list to find the\n  requested node.  This is the case for both the singly and doubly linked\n  list.\n\n*For specific examples and documentation, see the below sections*\n\n### Motivation:\n\nThe main purpose of this project is revisit the basics, and focus on the\ndevelopment process.\n\n*I wholehearedly acknowledge that the basic data structure space is populated\nwith well-written code and efficient implementations, and one could easily grab\none of those libraries and integrate it in their project.  However, the main\ndifference between those libraries/implementations and this one is that this is\nthe best implementation I have ever written.  My hope is that someone else will\nfind this useful, but understand, this code is not the goal; this will simply\nbe a useful bi-product of the journey.  The underlying motivation is to\nunderstand and, more importantly, learn from the process to get to the desired\nend-state&mdash;for me it is all about the joy of the journey.*\n\n#### Environment:\n\nAlthough this implementation is designed to be used with\n[Node.js](http://www.nodejs.org), it could be used in other contexts with minor\nmodifications.  This implementation does not have any external dependencies that\nwould preclude it from being used in the browser--just include it with a\n`<script>` tag and it should be good to go.  _Disclaimer: I have not tested\nthis implementation in any other context/environment; only tested with node.js_\n\n----\n\n## Basic Usage\nInstall with npm :\n\n```sh\nnpm install dbly-linked-list --save\n```\n\nBasic usage example below.  _Note: it does not cover all the available\nmethods, rather just highlights the main functionality to get up and running\nwith this data structure. For a description of all the methods, see the\nAPI section._\n\n```javascript\nvar LinkedList = require('dbly-linked-list');\nvar list - new LinkedList();\n\nlist.isEmpty();\n// --> true\n\nlist.insert('data item 1');\nlist.insert('data item 2');\nlist.insert('data item 3');\nlist.insert('data item 4');\n// list contains:\n// 'data item 1', ... ,'data item 4'\n\nlist.isEmpty();\n// --> false\n\nlist.getSize();\n// --> 4\n\nlist.insertFirst('data item 0');\n// list contains:\n// 'data item 0', ... ,'data item 4'\n\nlist.getHeadNode().getData();\n// --> 'data item 0'\n\nlist.remove();\n// --> removes 'data item 4'\n\nlist.removeFirst();\n// --> removes 'data item 0'\n\nlist.getHeadNode().getData();\n// --> 'data item 1'\n\nlist.clear();\nlist.isEmpty();\n// --> true\n```\n\n## API\n\n**Available methods for a doubly-linked-list instance:**\n\n* ### getHeadNode()\n    Returns the first node in the list\n\n* ### getTailNode()\n    Returns the last node in the list\n\n* ### isEmpty()\n    Determines if the list is empty or not. Returns true if is empty, false\n    otherwise.\n\n* ### getSize()\n    Returns the size of the list, or number of nodes\n\n* ### clear()\n    Clears the list of all nodes/data\n\n* ### insert(data)\n    Inserts a node (with the provided `data`) to the end of the list\n\n* ### insertFirst(data)\n    Inserts a node (with the provided `data`) to the front of the list\n\n* ### insertAt(index, data)\n    Inserts a node (with the provided `data`) at the `index` indicated.\n\n* ### insertBefore(nodeData, dataToInsert)\n    Inserts a node (with the `dataToInsert`) _before_ the first node containing\n    `nodeData`\n\n* ### insertAfter(nodeData, dataToInsert)\n    Inserts a node (with the `dataToInsert`) _after_ the first node containing\n    `nodeData`\n\n* ### remove()\n    Removes the tail node from the list\n\n* ### removeFirst()\n    Removes the head node from the list\n\n* ### removeAt(index)\n    Removes the node at the `index` provided\n\n* ### removeNode(nodeData)\n    Removes the first node that contains the `nodeData` provided\n\n* ### indexOf(nodeData)\n    Returns the index of the first node containing the provided `nodeData`.  If\n    a node cannot be found containing the provided data, -1 is returned.\n\n* ### contains(nodeData)\n    Determines whether or not the list contains the provided `nodeData`\n\n* ### find(nodeData)\n    Returns the fist node containing the provided `nodeData`.  If a node\n    cannot be found containing the provided data, -1 is returned.\n\n* ### findAt(index)\n    Returns the node at the location provided by `index`\n\n* ### forEach(fn)\n    Utility function to iterate over the list and call the `fn` provided\n    on each node, or element, of the list\n\n* ### toArray()\n    Returns an array of all the data contained in the list\n\n* ### printList()\n    Prints to the console the data property of each node in the list\n\n**Available methods for an individual node instance:**\n\n* ### getData()\n    Returns the data of the the node\n\n* ### hasNext()\n    Returns whether or not the node has a pointer to the next node\n\n* ### hasPrev()\n    Returns whether or not the node has a pointer to the previous node\n\n* ### toString()\n    Returns a string represenation of the node.  If the data is an object,\n    it returns the JSON.stringify version of the object.  Otherwise, it\n    simply returns the data\n\n----\n\n## License\nMIT &copy; Jason Jones\n\n\n[npm-image]:https://img.shields.io/npm/v/dbly-linked-list.svg?style=flat-square\n[npm-url]:http://npmjs.org/package/dbly-linked-list\n[travis-image]:https://img.shields.io/travis/jasonsjones/doubly-linked-list.svg?style=flat-square\n[travis-url]:https://travis-ci.org/jasonsjones/doubly-linked-list\n[dm-image]:https://img.shields.io/david/jasonsjones/doubly-linked-list.svg?style=flat-square\n[dm-url]:https://david-dm.org/jasonsjones/doubly-linked-list\n[devdep-image]:https://img.shields.io/david/dev/jasonsjones/doubly-linked-list.svg?style=flat-square\n[devdep-url]:https://david-dm.org/jasonsjones/doubly-linked-list#info=devDependencies\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jasonsjones/doubly-linked-list.git"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha"
  },
  "version": "0.1.10"
}
