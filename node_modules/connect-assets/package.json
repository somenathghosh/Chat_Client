{
  "_args": [
    [
      {
        "raw": "connect-assets@5.4.0",
        "scope": null,
        "escapedName": "connect-assets",
        "name": "connect-assets",
        "rawSpec": "5.4.0",
        "spec": "5.4.0",
        "type": "version"
      },
      "C:\\Users\\brode\\tcs_workspace\\p2p-chatapp"
    ]
  ],
  "_from": "connect-assets@5.4.0",
  "_id": "connect-assets@5.4.0",
  "_inCache": true,
  "_location": "/connect-assets",
  "_nodeVersion": "4.2.3",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/connect-assets-5.4.0.tgz_1475194749197_0.8724214020185173"
  },
  "_npmUser": {
    "name": "blakevanlan",
    "email": "blakevanlan@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "connect-assets@5.4.0",
    "scope": null,
    "escapedName": "connect-assets",
    "name": "connect-assets",
    "rawSpec": "5.4.0",
    "spec": "5.4.0",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/connect-assets/-/connect-assets-5.4.0.tgz",
  "_shasum": "763b58d80e945c857212b1ce66df609e424d909d",
  "_shrinkwrap": null,
  "_spec": "connect-assets@5.4.0",
  "_where": "C:\\Users\\brode\\tcs_workspace\\p2p-chatapp",
  "author": {
    "name": "Andrew Dunkman",
    "email": "andrew@dunkman.org"
  },
  "bin": {
    "connect-assets": "bin/connect-assets"
  },
  "bugs": {
    "url": "https://github.com/adunkman/connect-assets/issues"
  },
  "config": {
    "travis-cov": {
      "threshold": 95
    },
    "blanket": {
      "pattern": "//^((?!/node_modules/)(?!/test/).)*$/ig"
    }
  },
  "contributors": [
    {
      "name": "Trevor Burnham",
      "email": "trevorburnham@gmail.com",
      "url": "http://trevorburnham.com/"
    },
    {
      "name": "Andrew Dunkman",
      "email": "andrew@dunkman.org"
    },
    {
      "name": "Dusty Burwell",
      "email": "dustyburwell@gmail.com"
    },
    {
      "name": "Blake VanLandingham",
      "email": "blakevanlan@gmail.com"
    }
  ],
  "dependencies": {
    "argparse": "1.0.7",
    "csswring": "5.0.0",
    "mime": "1.3.4",
    "mincer": "1.5.0",
    "postcss": "5.0.21",
    "uglify-js": "2.6.2"
  },
  "description": "A Rails-like asset pipeline for Connect",
  "devDependencies": {
    "blanket": "1.2.3",
    "connect": "3.4.1",
    "ejs": "2.4.2",
    "expect.js": "0.3.1",
    "mocha": "2.5.3",
    "travis-cov": "0.2.5"
  },
  "directories": {},
  "dist": {
    "shasum": "763b58d80e945c857212b1ce66df609e424d909d",
    "tarball": "https://registry.npmjs.org/connect-assets/-/connect-assets-5.4.0.tgz"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "80ce7adb5a6f1b050f6d82d06ee980bcf5649f3f",
  "homepage": "https://github.com/adunkman/connect-assets#readme",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "TrevorBurnham",
      "email": "trevorburnham@gmail.com"
    },
    {
      "name": "adunkman",
      "email": "andrew@dunkman.org"
    },
    {
      "name": "blakevanlan",
      "email": "blakevanlan@gmail.com"
    },
    {
      "name": "trevorburnham",
      "email": "trevorburnham@gmail.com"
    }
  ],
  "name": "connect-assets",
  "optionalDependencies": {},
  "readme": "# connect-assets\n\n[![Build Status](https://travis-ci.org/adunkman/connect-assets.png)](https://travis-ci.org/adunkman/connect-assets)\n\nTransparent file compilation and dependency management for Node’s [connect](https://github.com/senchalabs/connect) framework in the spirit of the Rails asset pipeline.\n\n## What can it do?\n\nconnect-assets can:\n\n1. Serve `.js.coffee` ([CoffeeScript](http://coffeescript.org)) files as compiled `.js`\n2. Concatenate `.js.coffee` and `.js` together.\n3. Serve `.css.styl` ([Stylus](http://learnboost.github.com/stylus/)) as compiled `.css`\n4. Serve `.css.less` ([Less](http://lesscss.org/)) as compiled `.css`\n5. Serve `.css.sass` or `.css.scss` ([SASS](http://sass-lang.com)) as compiled `.css`\n6. Serve `.jst.jade` ([Jade templates](https://github.com/visionmedia/jade)) as compiled JavaScript functions (be sure to include the Jade runtime — see below).\n7. Serve `.jst.ejs` as compiled JavaScript functions.\n8. Preprocess `style.css.ejs` and `script.js.ejs` with [EJS](http://embeddedjs.com/) — just append `.ejs` to any file.\n9. Serve files with a cache-control token and use a far-future expires header for maximum efficiency.\n10. Avoid redundant git diffs by storing compiled `.js` and `.css` files in memory rather than writing them to the disk when in development.\n\n## How do I use it?\n\nFirst, install it in your project's directory:\n\n```shell\nnpm install connect-assets\n```\n\nAlso install any specific compilers you'll need, e.g.:\n\n```shell\nnpm install coffee-script\nnpm install stylus\nnpm install less\nnpm install node-sass\nnpm install jade\nnpm install ejs\n```\n\nThen add this line to your app's configuration:\n\n```javascript\napp.use(require(\"connect-assets\")());\n```\n\nFinally, create an `assets` directory in your project and throw all assets compiled into JavaScript into `/assets/js` and all assets compiled into CSS into `/assets/css`.\n\n### Markup functions\n\nconnect-assets provides five global functions named `js`, `jsInline`, `css`, `cssInline` and `assetPath`. Use them in your views. They return the HTML markup needed to include the most recent version of your assets (or, the path to the asset), taking advantage of caching when available. For instance, in a [Jade template](http://jade-lang.com/), the code\n\n```\n!= css(\"normalize\")\n!= js(\"jquery\")\n```\n\n(where `!=` is Jade's syntax for running JS and displaying its output) results in the markup\n\n```html\n<link rel=\"stylesheet\" href=\"/css/normalize-[hash].css\" />\n<script src=\"/js/jquery-[hash].js\"></script>\n```\n\nYou can pass a Hash of special attributes to helper method `css` or `js`:\n\n```\n!= css(\"normalize\", { 'data-turbolinks-track': true } })\n!= js(\"jquery\", { async: true })\n```\n\nResults in:\n\n```html\n<link rel=\"stylesheet\" href=\"/css/normalize-[hash].css\" data-turbolinks-track />\n<script src=\"/js/jquery-[hash].js\" async></script>\n```\n\nThe inline variants `jsInline` and `cssInline` write the contents straight into the tags, instead of linking. For example,\n\n```\n!= cssInline(\"normalize\")\n!= jsInline(\"jquery\")\n```\n\n(where `!=` is Jade's syntax for running JS and displaying its output) results in the markup\n\n```html\n<style>[contents]</style>\n<script>[contents]</script>\n```\n\nYou can also reference image paths via the `assetPath` helper. First, you must specify the\npath to your images via the `paths` option e.g:\n```javascript\n...\n\nvar assets = require('connect-assets');\n\napp.use(assets({\n  paths: [\n    'assets/css',\n    'assets/js',\n    'assets/img'\n  ]\n}));\n```\nYou can then use the `assetPath` helper in your Jade like so:\n```\nimg(src=\"#{assetPath('image-name.png')}\")\n```\n\nWould result in:\n```html\n<img src=\"/assets/img/image-name-[hash].png\">\n```\n\n### Sprockets-style concatenation\n\nYou can indicate dependencies in your `.js.coffee` and `.js` files using the Sprockets-style syntax.\n\nIn CoffeeScript:\n\n```coffeescript\n#= require dependency\n```\n\nIn JavaScript:\n\n```javascript\n//= require dependency\n```\n\nWhen you do so, and point the `js` function at that file, two things can happen:\n\n1. By default, you'll get multiple `<script>` tags out, in an order that gives you all of your dependencies.\n2. If you passed the `build: true` option to connect-assets (enabled by default when `NODE_ENV=production`), you'll just get a single tag, wich will point to a JavaScript file that encompasses the target's entire dependency graph—compiled, concatenated, and minified (with [UglifyJS](https://github.com/mishoo/UglifyJS)).\n\nIf you want to bring in a whole folder of scripts, use `//= require_tree dir` instead of `//= require file`.\n\nYou can also indicate dependencies in your `.css` files using the Sprockets-style syntax.\n\n```css\n/*= require reset.css */\n\nbody { margin: 0; }\n```\n\nSee [Mincer](https://github.com/nodeca/mincer) for more information.\n\n## Options\n\nIf you like, you can pass any of these options to the first parameter of the function returned by `require(\"connect-assets\")`:\n\nOption        | Default Value                   | Description\n--------------|---------------------------------|-------------------------------\npaths         | [\"assets/js\", \"assets/css\"]     | The directories that assets will be read from, in order of preference.\nhelperContext | global                          | The object that helper functions (css, js, assetPath) will be attached to.\nservePath     | \"assets\"                        | The virtual path in which assets will be served over HTTP. If hosting assets locally, supply a local path (say, \"assets\"). If hosting assets remotely on a CDN, supply a URL: \"http://myassets.example.com/assets\".\nprecompile    | [\"\\*.\\*\"]                       | An array of assets to precompile while the server is initializing. Patterns should match the filename only, not including the directory.\nbuild         | dev: false; prod: true          | Should assets be saved to disk (true), or just served from memory (false)?\nbuildDir      | \"builtAssets\"                   | The directory to save (and load) compiled assets to/from.\ncompile       | true                            | Should assets be compiled if they don’t already exist in the `buildDir`?\nbundle        | dev: false; prod: true          | Should assets be bundled into a single tag (when possible)?\ncompress      | dev: false; prod: true          | Should assets be minified? If enabled, requires `uglify-js` and `csswring`.\ngzip          | false                           | Should assets have gzipped copies in `buildDir`?\nfingerprinting| dev: false; prod: true          | Should fingerprints be appended to asset filenames?\nsourceMaps    | dev: true; prod: false          | Should source maps be served?\n\n## Custom Configuration of Mincer\n\nThis package depends on [mincer](https://github.com/nodeca/mincer), which is quite configurable by design. Many options from mincer are not exposed through connect-assets in the name of simplicity.\n\nAs asset compliation happens immediately after connect-assets is initialized, any changes that affect the way mincer compiles assets should be made during initialization. A custom initialization function can be passed to connect-assets as a second argument to the function returned by `require(\"connect-assets\")`:\n\n```javascript\napp.use(require(\"connect-assets\")(options, function (instance) {\n  // Custom configuration of the mincer environment can be placed here\n  instance.environment.registerHelper(/* ... */);\n}));\n```\n\n## Serving Assets from a CDN\n\nconnect-assets includes a command-line utility, `connect-assets`, which can be used to precompile assets on your filesystem (which you can then upload to your CDN of choice). From your application directory, you can execute it with `./node_modules/.bin/connect-assets [options]`.\n\n```\nUsage: connect-assets [-h] [-v] [-gz] [-ap] [-i [DIRECTORY [DIRECTORY ...]]]\n                      [-c [FILE [FILE ...]]] [-o DIRECTORY]\n\nPrecompiles assets supplied into their production-ready form, ready for\nupload to a CDN or static file server. The generated manifest.json is all\nthat is required on your application server if connect-assets is properly\nconfigured.\n\nOptional arguments:\n  -h, --help            Show this help message and exit.\n  -v, --version         Show program's version number and exit.\n  -i [DIRECTORY [DIRECTORY ...]], --include [DIRECTORY [DIRECTORY ...]]\n                        Adds the directory to a list of directories that\n                        assets will be read from, in order of preference.\n                        Defaults to 'assets/js' and 'assets/css'.\n  -c [FILE [FILE ...]], --compile [FILE [FILE ...]]\n                        Adds the file (or pattern) to a list of files to\n                        compile. Defaults to all files with extensions. Only\n                        include the left most extension (ex. main.css).\n  -o DIRECTORY, --output DIRECTORY\n                        Specifies the output directory to write compiled\n                        assets to. Defaults to 'builtAssets'.\n  -s PATH, --servePath PATH\n                        The virtual path in which assets will be served\n                        over HTTP. If hosting assets locally, supply a\n                        local path (say, \"assets\"). If hosting assets\n                        remotely on a CDN, supply a URL.\n  -gz, --gzip\n                        Enables gzip file generation, which is disabled by\n                        default.\n  -ap, --autoprefixer   Enables autoprefixer during compilation.\n  -sm, --sourceMaps     Enables source map generation for all files.\n  -emc, --embedMappingComments\n                        Embed source map url into compiled files.\n  -nsmp, --noSourceMapProtection\n                        Do not add XSSI protection header to source map files.\n                        https://github.com/adunkman/connect-assets/issues/345#issuecomment-235246691\n```\n\n## Credits\n\nFollows in the footsteps of sstephenson's [Sprockets](https://github.com/sstephenson/sprockets), through the [Mincer](https://github.com/nodeca/mincer) project.\n\nTake a look at the [contributors](https://github.com/adunkman/connect-assets/contributors) who make this project possible.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/adunkman/connect-assets.git"
  },
  "scripts": {
    "test": "npm run test-unit && npm run test-cov",
    "test-cov": "mocha --require blanket --reporter travis-cov",
    "test-cov-report": "mocha --require blanket --reporter html-cov > coverage.html && open coverage.html",
    "test-unit": "mocha --reporter spec",
    "test-watch": "mocha --reporter min --watch"
  },
  "version": "5.4.0"
}
