{
  "_args": [
    [
      {
        "raw": "socket.io-redis@5.1.0",
        "scope": null,
        "escapedName": "socket.io-redis",
        "name": "socket.io-redis",
        "rawSpec": "5.1.0",
        "spec": "5.1.0",
        "type": "version"
      },
      "C:\\Users\\brode\\tcs_workspace\\p2p-chatapp"
    ]
  ],
  "_from": "socket.io-redis@5.1.0",
  "_id": "socket.io-redis@5.1.0",
  "_inCache": true,
  "_location": "/socket.io-redis",
  "_nodeVersion": "6.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/socket.io-redis-5.1.0.tgz_1496558427414_0.41276102513074875"
  },
  "_npmUser": {
    "name": "darrachequesne",
    "email": "damien.arrachequesne@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {
    "ms": "2.0.0"
  },
  "_requested": {
    "raw": "socket.io-redis@5.1.0",
    "scope": null,
    "escapedName": "socket.io-redis",
    "name": "socket.io-redis",
    "rawSpec": "5.1.0",
    "spec": "5.1.0",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/socket.io-redis/-/socket.io-redis-5.1.0.tgz",
  "_shasum": "a7d6a373d1de46583576b0089ff615de77d24005",
  "_shrinkwrap": null,
  "_spec": "socket.io-redis@5.1.0",
  "_where": "C:\\Users\\brode\\tcs_workspace\\p2p-chatapp",
  "bugs": {
    "url": "https://github.com/socketio/socket.io-redis/issues"
  },
  "dependencies": {
    "debug": "~2.6.8",
    "notepack.io": "~2.0.0",
    "redis": "~2.7.1",
    "socket.io-adapter": "~1.1.0",
    "uid2": "0.0.3"
  },
  "description": "[![Build Status](https://travis-ci.org/socketio/socket.io-redis.svg?branch=master)](https://travis-ci.org/socketio/socket.io-redis) [![NPM version](https://badge.fury.io/js/socket.io-redis.svg)](http://badge.fury.io/js/socket.io-redis)",
  "devDependencies": {
    "expect.js": "0.3.1",
    "ioredis": "^3.1.1",
    "mocha": "^3.4.2",
    "socket.io": "latest",
    "socket.io-client": "latest"
  },
  "directories": {},
  "dist": {
    "shasum": "a7d6a373d1de46583576b0089ff615de77d24005",
    "tarball": "https://registry.npmjs.org/socket.io-redis/-/socket.io-redis-5.1.0.tgz"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "f978d24e1436e888bf0750467d836e54be966220",
  "homepage": "https://github.com/socketio/socket.io-redis#readme",
  "license": "MIT",
  "maintainers": [
    {
      "name": "darrachequesne",
      "email": "damien.arrachequesne@gmail.com"
    },
    {
      "name": "rauchg",
      "email": "rauchg@gmail.com"
    }
  ],
  "name": "socket.io-redis",
  "optionalDependencies": {},
  "readme": "# socket.io-redis\n\n[![Build Status](https://travis-ci.org/socketio/socket.io-redis.svg?branch=master)](https://travis-ci.org/socketio/socket.io-redis)\n[![NPM version](https://badge.fury.io/js/socket.io-redis.svg)](http://badge.fury.io/js/socket.io-redis)\n\n## How to use\n\n```js\nvar io = require('socket.io')(3000);\nvar redis = require('socket.io-redis');\nio.adapter(redis({ host: 'localhost', port: 6379 }));\n```\n\nBy running socket.io with the `socket.io-redis` adapter you can run\nmultiple socket.io instances in different processes or servers that can\nall broadcast and emit events to and from each other.\n\nIf you need to emit events to socket.io instances from a non-socket.io\nprocess, you should use [socket.io-emitter](https://github.com/socketio/socket.io-emitter).\n\n## API\n\n### adapter(uri[, opts])\n\n`uri` is a string like `localhost:6379` where your redis server\nis located. For a list of options see below.\n\n### adapter(opts)\n\nThe following options are allowed:\n\n- `key`: the name of the key to pub/sub events on as prefix (`socket.io`)\n- `host`: host to connect to redis on (`localhost`)\n- `port`: port to connect to redis on (`6379`)\n- `pubClient`: optional, the redis client to publish events on\n- `subClient`: optional, the redis client to subscribe to events on\n- `requestsTimeout`: optional, after this timeout the adapter will stop waiting from responses to request (`1000ms`)\n\nIf you decide to supply `pubClient` and `subClient`, make sure you use\n[node_redis](https://github.com/mranney/node_redis) as a client or one\nwith an equivalent API.\n\n### RedisAdapter\n\nThe redis adapter instances expose the following properties\nthat a regular `Adapter` does not\n\n- `uid`\n- `prefix`\n- `pubClient`\n- `subClient`\n- `requestsTimeout`\n\n### RedisAdapter#clients(rooms:Array, fn:Function)\n\nReturns the list of client IDs connected to `rooms` across all nodes. See [Namespace#clients(fn:Function)](https://github.com/socketio/socket.io#namespaceclientsfnfunction)\n\n```js\nio.of('/').adapter.clients(function (err, clients) {\n  console.log(clients); // an array containing all connected socket ids\n});\n\nio.of('/').adapter.clients(['room1', 'room2'], function (err, clients) {\n  console.log(clients); // an array containing socket ids in 'room1' and/or 'room2'\n});\n\n// you can also use\n\nio.in('room3').clients(function (err, clients) {\n  console.log(clients); // an array containing socket ids in 'room3'\n});\n```\n\n### RedisAdapter#clientRooms(id:String, fn:Function)\n\nReturns the list of rooms the client with the given ID has joined (even on another node).\n\n```js\nio.of('/').adapter.clientRooms('<my-id>', function (err, rooms) {\n  if (err) { /* unknown id */ }\n  console.log(rooms); // an array containing every room a given id has joined.\n});\n```\n\n### RedisAdapter#allRooms(fn:Function)\n\nReturns the list of all rooms.\n\n```js\nio.of('/').adapter.allRooms(function (err, rooms) {\n  console.log(rooms); // an array containing all rooms (accross every node)\n});\n```\n\n### RedisAdapter#remoteJoin(id:String, room:String, fn:Function)\n\nMakes the socket with the given id join the room. The callback will be called once the socket has joined the room, or with an `err` argument if the socket was not found.\n\n```js\nio.of('/').adapter.remoteJoin('<my-id>', 'room1', function (err) {\n  if (err) { /* unknown id */ }\n  // success\n});\n```\n\n### RedisAdapter#remoteLeave(id:String, room:String, fn:Function)\n\nMakes the socket with the given id leave the room. The callback will be called once the socket has left the room, or with an `err` argument if the socket was not found.\n\n```js\nio.of('/').adapter.remoteLeave('<my-id>', 'room1', function (err) {\n  if (err) { /* unknown id */ }\n  // success\n});\n```\n\n### RedisAdapter#remoteDisconnect(id:String, close:Boolean, fn:Function)\n\nMakes the socket with the given id to get disconnected. If `close` is set to true, it also closes the underlying socket. The callback will be called once the socket was disconnected, or with an `err` argument if the socket was not found.\n\n```js\nio.of('/').adapter.remoteDisconnect('<my-id>', true, function (err) {\n  if (err) { /* unknown id */ }\n  // success\n});\n```\n\n### RedisAdapter#customRequest(data:Object, fn:Function)\n\nSends a request to every nodes, that will respond through the `customHook` method.\n\n```js\n// on every node\nio.of('/').adapter.customHook = function (data, cb) {\n  cb('hello ' + data);\n}\n\n// then\nio.of('/').adapter.customRequest('john', function(err, replies){\n  console.log(replies); // an array ['hello john', ...] with one element per node\n});\n```\n\n## Client error handling\n\nAccess the `pubClient` and `subClient` properties of the\nRedis Adapter instance to subscribe to its `error` event:\n\n```js\nvar redis = require('socket.io-redis');\nvar adapter = redis('localhost:6379');\nadapter.pubClient.on('error', function(){});\nadapter.subClient.on('error', function(){});\n```\n\nThe errors emitted from `pubClient` and `subClient` will\nalso be forwarded to the adapter instance:\n\n```js\nvar io = require('socket.io')(3000);\nvar redis = require('socket.io-redis');\nio.adapter(redis({ host: 'localhost', port: 6379 }));\nio.of('/').adapter.on('error', function(){});\n```\n\n## Custom client (eg: with authentication)\n\nIf you need to create a redisAdapter to a redis instance\nthat has a password, use pub/sub options instead of passing\na connection string.\n\n```js\nvar redis = require('redis').createClient;\nvar adapter = require('socket.io-redis');\nvar pub = redis(port, host, { auth_pass: \"pwd\" });\nvar sub = redis(port, host, { auth_pass: \"pwd\" });\nio.adapter(adapter({ pubClient: pub, subClient: sub }));\n```\n\n## Protocol\n\nThe `socket.io-redis` adapter broadcasts and receives messages on particularly named Redis channels. For global broadcasts the channel name is:\n```\nprefix + '#' + namespace + '#'\n```\n\nIn broadcasting to a single room the channel name is:\n```\nprefix + '#' + namespace + '#' + room + '#'\n```\n\n\n- `prefix`: The base channel name. Default value is `socket.io`. Changed by setting `opts.key` in `adapter(opts)` constructor\n- `namespace`: See https://github.com/socketio/socket.io#namespace.\n- `room` : Used if targeting a specific room.\n\nA number of other libraries adopt this protocol including:\n\n- [socket.io-emitter](https://github.com/socketio/socket.io-emitter)\n- [socket.io-python-emitter](https://github.com/GameXG/socket.io-python-emitter)\n- [socket.io-emitter-go](https://github.com/stackcats/socket.io-emitter-go)\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/socketio/socket.io-redis.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "5.1.0"
}
